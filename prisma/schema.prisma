generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int          @id @default(autoincrement())
  login       String       @unique
  password    String
  role        Role
  patients    Patient[]
  specialists Specialist[]
  createdAt   DateTime     @default(now())

  @@map("users")
}

enum Role {
  PATIENT
  SPECIALIST
  ADMIN
}

model Patient {
  id                 Int                 @id @default(autoincrement())
  userId             Int                 @unique
  user               User                @relation(fields: [userId], references: [id])
  firstName          String              @map("first_name")
  lastName           String              @map("last_name")
  parentFirstName    String?             @map("parent_first_name")
  parentLastName     String?             @map("parent_last_name")
  telephoneNumber    String?             @map("telephone_number")
  individualSession  IndividualSession[]
  groupSessions      GroupSession[]      @relation("GroupSessionPatient")
  developmentResults DevelopmentResult[]
  payments           Payment[]
  debts              Debt[]

  @@map("patients")
}

model Specialist {
  id                 Int                 @id @default(autoincrement())
  userId             Int                 @unique
  user               User                @relation(fields: [userId], references: [id])
  firstName          String              @map("first_name")
  lastName           String              @map("last_name")
  specialization     String
  salaryPercent      Float               @default(50) @map("salary_percent")
  telephoneNumber    String?             @map("telephone_number")
  individualSession  IndividualSession[]
  groupSessions      GroupSession[]      @relation("GroupSessionSpecialist")
  developmentResults DevelopmentResult[]
  mainGroupSessions  GroupSession[]      @relation("MainSpecialist")
  card               SpecialistCard?     @relation("SpecialistCard")

  @@map("specialists")
}

model SpecialistCard {
  id           Int        @id @default(autoincrement())
  specialist   Specialist @relation("SpecialistCard", fields: [specialistId], references: [id])
  specialistId Int        @unique
  description  String?
  photo        String?
  diplomaPhoto String?    @map("diploma_photo")

  @@map("specialist_cards")
}

model IndividualSession {
  id           Int    @id @default(autoincrement())
  day          String
  startTime    String @map("start_time")
  endTime      String @map("end_time")
  specialistId Int    @map("specialist_id")
  patientId    Int?   @map("patient_id")

  specialist Specialist @relation(fields: [specialistId], references: [id])
  patient    Patient?   @relation(fields: [patientId], references: [id])

  @@map("individual_session")
}

model GroupSession {
  id                   Int          @id @default(autoincrement())
  day                  String
  streamNumber         Int          @default(1) @map("stream_number")
  firstStageStartTime  String       @default("00:00") @map("first_stage_start_time")
  firstStageEndTime    String       @default("00:00") @map("first_stage_end_time")
  secondStageStartTime String?      @default("00:00") @map("second_stage_start_time")
  secondStageEndTime   String?      @default("00:00") @map("second_stage_end_time")
  patients             Patient[]    @relation("GroupSessionPatient")
  specialists          Specialist[] @relation("GroupSessionSpecialist")
  mainSpecialistId     Int?         @map("main_specialist_id")
  mainSpecialist       Specialist?  @relation("MainSpecialist", fields: [mainSpecialistId], references: [id])

  @@map("group_sessions")
}

model Payment {
  id          Int           @id @default(autoincrement())
  patientId   Int           @map("patient_id")
  amount      Float
  status      PaymentStatus
  paymentDate DateTime
  patient     Patient       @relation(fields: [patientId], references: [id])
  debt        Debt?         @relation("PaymentDebt")

  @@map("payment")
}

enum PaymentStatus {
  PAID
  UNPAID
  CANCELLED
}

model Debt {
  id        Int      @id @default(autoincrement())
  patientId Int
  amount    Float
  isPaid    Boolean  @default(false)
  createdAt DateTime @default(now())
  patient   Patient  @relation(fields: [patientId], references: [id])
  paymentId Int?     @unique @map("payment_id")
  payment   Payment? @relation("PaymentDebt", fields: [paymentId], references: [id])

  @@map("debt")
}

model DevelopmentResult {
  id             Int      @id @default(autoincrement())
  patientId      Int
  specialistId   Int
  evaluationDate DateTime @default(now())
  progress       String
  testResults    Int

  patient    Patient    @relation(fields: [patientId], references: [id])
  specialist Specialist @relation(fields: [specialistId], references: [id])

  @@map("development_result")
}

model IncomeExpense {
  id                 Int      @id @default(autoincrement())
  month              Int
  year               Int
  totalIncome        Float    @default(0)
  officeRent         Float    @default(0)
  specialistSalaries Float    @default(0)
  createdAt          DateTime @default(now())

  @@map("income_expense")
}

model Gallery {
  id    Int    @id @default(autoincrement())
  photo String
}

model Manual {
  id           Int    @id @default(autoincrement())
  documentName String @default("Безымя́нный") @map("document_name")
  document     String

  @@map("manuals")
}

model Post {
  id          Int    @id @default(autoincrement())
  photo       String
  description String

  createdAt DateTime @default(now())

  @@map("posts")
}
